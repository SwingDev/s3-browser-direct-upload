var _, assert, chai, expect, fs, moment, path, s3BrowserUpload, sinon, sinonChai;

_ = require('lodash');

fs = require('fs');

moment = require('moment');

chai = require('chai');

path = require('path');

sinon = require('sinon');

sinonChai = require('sinon-chai');

assert = chai.assert;

expect = chai.expect;

chai.use(sinonChai);

s3BrowserUpload = require('../lib');

describe('s3-uploadPostForm tests', function() {
  var runTests;
  runTests = function(asEnvironmentVar) {
    var accessKeyId, secretAccessKey, testNameSuffix;
    delete process.env.AWS_ACCESS_KEY_ID;
    delete process.env.AWS_SECRET_ACCESS_KEY;
    accessKeyId = 'rHiziprP5FLOL5DpLaRc';
    secretAccessKey = 'dGudXJxDvtgZ2oRvzuMY1uWA/tsziUXwkd3tnJBk';
    testNameSuffix = ' without env';
    if (asEnvironmentVar) {
      process.env.AWS_ACCESS_KEY_ID = accessKeyId;
      process.env.AWS_SECRET_ACCESS_KEY = secretAccessKey;
      accessKeyId = '';
      secretAccessKey = '';
      testNameSuffix = ' with env';
    }
    describe('#uploadPostForm tests' + testNameSuffix, function() {
      var s3client;
      s3client = null;
      before(function() {
        console.log(accessKeyId);
        return s3client = new s3BrowserUpload({
          accessKeyId: accessKeyId,
          secretAccessKey: secretAccessKey,
          signatureVersion: "v4",
          region: "eu-central-1"
        });
      });
      it('should return json with all parameters required to build a form', function(done) {
        var uploadPostFormOptions;
        uploadPostFormOptions = {
          key: "testKey.jpg",
          bucket: 'testBucket',
          expires: moment().add(60, 'minutes').toDate(),
          extension: 'jpg'
        };
        return s3client.uploadPostForm(uploadPostFormOptions, function(err, params) {
          expect(params).to.have.deep.property('params.key');
          expect(params).to.have.deep.property('params.acl');
          expect(params).to.have.deep.property('params.content-type');
          expect(params).to.have.deep.property('params.x-amz-algorithm');
          expect(params).to.have.deep.property('params.x-amz-credential');
          expect(params).to.have.deep.property('params.x-amz-date');
          expect(params).to.have.deep.property('params.policy');
          expect(params).to.have.deep.property('params.x-amz-signature');
          expect(params).to.have.deep.property('public_url');
          expect(params).to.have.deep.property('form_url');
          expect(params).to.not.have.deep.property('conditions');
          return done();
        });
      });
      return it('should return json with all parameters required to build a form if custom conditionMatching used', function(done) {
        var uploadPostFormOptions;
        uploadPostFormOptions = {
          key: "testKey.jpg",
          bucket: 'testBucket',
          expires: moment().add(60, 'minutes').toDate(),
          extension: 'jpg',
          conditionMatching: [
            {
              "success_action_redirect": "http://google.com"
            }
          ]
        };
        return s3client.uploadPostForm(uploadPostFormOptions, function(err, params) {
          expect(params).to.have.deep.property('params.key');
          expect(params).to.have.deep.property('params.acl');
          expect(params).to.have.deep.property('params.content-type');
          expect(params).to.have.deep.property('params.x-amz-algorithm');
          expect(params).to.have.deep.property('params.x-amz-credential');
          expect(params).to.have.deep.property('params.x-amz-date');
          expect(params).to.have.deep.property('params.policy');
          expect(params).to.have.deep.property('params.x-amz-signature');
          expect(params).to.have.deep.property('public_url');
          expect(params).to.have.deep.property('form_url');
          expect(params).to.have.deep.property('conditions');
          return done();
        });
      });
    });
    describe('#upload tests' + testNameSuffix, function() {
      var s3client;
      s3client = null;
      before(function() {
        s3client = new s3BrowserUpload({
          accessKeyId: accessKeyId,
          secretAccessKey: secretAccessKey,
          signatureVersion: "v4",
          region: "eu-central-1"
        });
        return sinon.stub(s3client.s3, 'upload', function(params, cb) {
          return cb();
        });
      });
      after(function() {
        return s3client.s3.upload.restore();
      });
      return it('should return url of uploaded file', function(done) {
        var uploadOptions;
        uploadOptions = {
          data: "String Object data",
          key: "testKey.txt",
          bucket: 'testBucket',
          extension: 'txt',
          acl: 'public-read'
        };
        return s3client.upload(uploadOptions, function(err, url) {
          expect(url).to.exists;
          expect(url).to.equal('https://testBucket.s3.amazonaws.com/testKey.txt');
          return done();
        });
      });
    });
    return describe('#put tests' + testNameSuffix, function() {
      var s3client;
      s3client = null;
      before(function() {
        s3client = new s3BrowserUpload({
          accessKeyId: accessKeyId,
          secretAccessKey: secretAccessKey,
          signatureVersion: "v4",
          region: "eu-central-1"
        });
        return sinon.stub(s3client.s3, 'getSignedUrl', function(typeName, params, cb) {
          return cb(null, 'https://testBucket.s3.amazonaws.com/testKey.txt');
        });
      });
      after(function() {
        return s3client.s3.getSignedUrl.restore();
      });
      return it('should return json with signed and public urls', function(done) {
        var uploadOptions;
        uploadOptions = {
          key: "testKey.txt",
          bucket: 'testBucket',
          extension: 'txt',
          acl: 'public-read'
        };
        return s3client.put(uploadOptions, function(err, urls) {
          expect(urls).to.have.property('signed_url');
          expect(urls).to.have.property('public_url');
          return done();
        });
      });
    });
  };
  runTests(true);
  return runTests(false);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
